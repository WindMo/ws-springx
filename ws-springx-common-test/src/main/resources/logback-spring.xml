<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration  scan="true" scanPeriod="10 seconds" debug="false">

    <contextName>logback</contextName>
    <springProperty scope="context" name="APP_NAME" source="spring.application.name"/>
    <!--  日志文件路径  -->
    <property name="LOG_HOME" value="/opt/springboot-application/logs/${APP_NAME}" />
    <property name="LOG_CHARSET" value="UTF-8" />
    <property name="FILE_LOG_MAX_HISTORY" value="15"/>
    <property name="FILE_LOG_MAX_SIZE" value="50MB"/>
    <property name="FILE_LOG_TOTAL_MAX_SIZE" value="500MB"/>
    <property name="FILE_COMPRESSED_PATTERN_SUFFIX" value="%d{yyyy-MM-dd}.%i.gz"/>


    <!-- 默认控制台日志格式，此value值写法支持彩色，为springboot默认格式 -->
    <property name="CONSOLE_LOG_DEFAULT_PATTERN" value="%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
    <!-- 控制台日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-${CONSOLE_LOG_DEFAULT_PATTERN}}"/>
    <!-- 文件日志格式，此处为控制台日志格式无彩色版 -->
    <property name="FILE_LOG_PATTERN" value="%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%15.15t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

    <!-- 输出到控制台的 appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">

        <!--此日志appender是为开发使用，只配置最低级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!-- 输出到文件的 appender -->
    <appender name="ROOT" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 当前记录的日志文档完整路径 -->
        <file>${LOG_HOME}/root.log</file>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">

            <!-- 归档日志文件 gz zip 格式可进行压缩其他后缀则不压缩 -->
            <fileNamePattern>${LOG_HOME}/root.${FILE_COMPRESSED_PATTERN_SUFFIX}</fileNamePattern>
            <!-- 日志文档保留天数（非持续运行情况下，${maxHistory} 天外不会清理）-->
            <maxHistory>${FILE_LOG_MAX_HISTORY}</maxHistory>
            <!-- 单日志文件大小  -->
            <maxFileSize>${FILE_LOG_MAX_SIZE}</maxFileSize>
            <!-- 应对服务非持续偶尔运行，日志清理机制无法触发而导致日志得不到清理的情况-->
            <totalSizeCap>${FILE_LOG_TOTAL_MAX_SIZE}</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
    </appender>

    <!-- TEST::滚动策略扩展 -->
    <appender name="ROOT_WS" class="ws.spring.log.AccessControlRollingFileAppender">

        <file>${LOG_HOME}/root-ws.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <rollingPolicy class="ws.spring.log.AccessControlBasedRollingPolicy">

            <fileNamePattern>${LOG_HOME}/root-ws.${FILE_COMPRESSED_PATTERN_SUFFIX}</fileNamePattern>
            <maxHistory>${FILE_LOG_MAX_HISTORY}</maxHistory>
            <maxFileSize>${FILE_LOG_MAX_SIZE}</maxFileSize>
            <totalSizeCap>${FILE_LOG_TOTAL_MAX_SIZE}</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>

            <!-- 扩展的属性，设置归档日志文件权限 -->
            <filePermissions>rw-------</filePermissions>
        </rollingPolicy>
        <!-- 扩展的属性，设置日志文件权限 -->
        <filePermissions>rw-------</filePermissions>
    </appender>

    <!--
       root节点是必选节点，用来指定通用的日志输出级别，只有一个level属性
       level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
       不能设置为INHERITED或者同义词NULL。默认是DEBUG
       可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->
    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>
    </root>

    <!-- 本地环境输出至控制台 -->
    <!-- 如果使用了 springProfile, 需要将logback.xml名称改为logback-spring.xml-->
    <springProfile name="default,local">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!-- 线上环境输出到文件 -->
    <springProfile name="test,sit,uat,pro">
        <root level="INFO">
<!--            <appender-ref ref="ROOT"/>-->
            <appender-ref ref="ROOT_WS"/>
        </root>
    </springProfile>

    <!--
         <logger>用来设置某一个包或者具体的某一个类的日志打印级别，以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的 addtivity 属性。
         name:用来指定受此logger约束的某一个包或者具体的某一个类。
         level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
               还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
               如果未设置此属性，那么当前logger将会继承上级的级别。
         addtivity:是否向上级logger传递打印信息。默认是true。
     -->
    <!-- spring框架出错或告警时才记录日志 -->
    <logger name="org.springframework" level="WARN" addtivity="true"/>
    <logger name="org.hibernate.validator" level="WARN" addtivity="true"/>

</configuration>